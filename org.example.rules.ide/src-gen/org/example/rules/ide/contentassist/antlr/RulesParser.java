/*
 * generated by Xtext 2.20.0
 */
package org.example.rules.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.rules.ide.contentassist.antlr.internal.InternalRulesParser;
import org.example.rules.services.RulesGrammarAccess;

public class RulesParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RulesGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RulesGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFilterAccess().getElementAlternatives_0_0(), "rule__Filter__ElementAlternatives_0_0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getFilterAccess().getGroup(), "rule__Filter__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getModelAccess().getActionsAssignment_0(), "rule__Model__ActionsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getRulesAssignment_1(), "rule__Model__RulesAssignment_1");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
			builder.put(grammarAccess.getActionRefAccess().getNodeAssignment(), "rule__ActionRef__NodeAssignment");
			builder.put(grammarAccess.getFilterAccess().getElementAssignment_0(), "rule__Filter__ElementAssignment_0");
			builder.put(grammarAccess.getFilterAccess().getValueAssignment_2(), "rule__Filter__ValueAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getFiltersAssignment_5(), "rule__Rule__FiltersAssignment_5");
			builder.put(grammarAccess.getRuleAccess().getActionsAssignment_9(), "rule__Rule__ActionsAssignment_9");
			builder.put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RulesGrammarAccess grammarAccess;

	@Override
	protected InternalRulesParser createParser() {
		InternalRulesParser result = new InternalRulesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RulesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RulesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
